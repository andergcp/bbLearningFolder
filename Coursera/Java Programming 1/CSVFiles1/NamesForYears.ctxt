#BlueJ class context
comment0.target=NamesForYears
comment1.params=
comment1.target=void\ totalBirths()
comment1.text=\n\ Prints\ the\ number\ of\ girls\ names\ ,\ the\ number\ of\ boys\ names\ and\ the\n\ total\ names\ in\ the\ file.\n
comment10.params=
comment10.target=void\ testYearOfHighestRank()
comment10.text=\n\ Tests\ yearOfHighestRank\n
comment11.params=name\ gender
comment11.target=double\ getAverageRank(java.lang.String,\ java.lang.String)
comment11.text=\n\ This\ method\ selects\ a\ range\ of\ files\ to\ process\ and\ returns\ a\ double\n\ representing\ the\ average\ rank\ of\ the\ name\ and\ gender\ over\ the\ selected\n\ files.\ It\ should\ return\ -1.0\ if\ the\ name\ is\ not\ ranked\ in\ any\ of\ the\n\ selected\ files.\ \n
comment12.params=
comment12.target=void\ testGetAverageRank()
comment12.text=\n\ Tests\ getAverageRank()\ method\n
comment13.params=year\ name\ gender
comment13.target=int\ getTotalBirthsRankedHigher(int,\ java.lang.String,\ java.lang.String)
comment13.text=\n\ This\ method\ returns\ an\ integer,\ the\ total\ number\ of\ births\ of\ those\n\ names\ with\ the\ same\ gender\ and\ same\ year\ who\ are\ ranked\n\ higher\ than\ name.\n
comment14.params=
comment14.target=void\ testGetTotalBirthsRankedHigher()
comment14.text=\n\ Tests\ getTotalBirthsRankedHigher()\ method\n
comment15.params=
comment15.target=void\ numberNames()
comment15.text=\n\ Prints\ the\ number\ of\ names\ in\ the\ file\n
comment16.params=
comment16.target=void\ testNumberNames()
comment16.text=\n\ Tests\ numberNames()\ method\n
comment2.params=
comment2.target=void\ testTotalBirths()
comment2.text=\n\ Tests\ totalBirths()\ method\n
comment3.params=year\ name\ gender
comment3.target=int\ getRank(int,\ java.lang.String,\ java.lang.String)
comment3.text=\n\ Returns\ the\ rank\ of\ the\ name\ in\ the\ file\ for\ the\ given\ gender,\n\ where\ rank\ 1\ is\ the\ name\ with\ the\ largest\ number\ of\ births.\n\ If\ the\ name\ is\ not\ in\ the\ file,\ then\ -1\ is\ returned.\n
comment4.params=
comment4.target=void\ testGetRank()
comment4.text=\n\ Tests\ getRank()\ method\n
comment5.params=year\ rank\ gender
comment5.target=java.lang.String\ getName(int,\ int,\ java.lang.String)
comment5.text=\n\ Returns\ the\ name\ of\ the\ person\ in\ the\ file\ at\ this\ rank,\ for\ the\ given\n\ gender,\ where\ rank\ 1\ is\ the\ name\ with\ the\ largest\ number\ of\ births.\n\ If\ the\ rank\ does\ not\ exist\ in\ the\ file,\ then\ \u201CNO\ NAME\u201D\ \ is\ returned.\n
comment6.params=
comment6.target=void\ testGetName()
comment6.text=\n\ Tests\ getName()\ method\n
comment7.params=name\ year\ newYear\ gender
comment7.target=void\ whatIsNameInYear(java.lang.String,\ int,\ int,\ java.lang.String)
comment7.text=\n\ his\ method\ determines\ what\ name\ would\ have\ been\ named\ if\ they\ were\ born\n\ in\ a\ different\ year,\ based\ on\ the\ same\ popularity.\n
comment8.params=
comment8.target=void\ testWhatIsNameInYear()
comment8.text=\n\ Tests\ whatIsNameInYear\ method\n
comment9.params=name\ gender
comment9.target=int\ yearOfHighestRank(java.lang.String,\ java.lang.String)
comment9.text=\n\ yearOfHighestRank\n
numComments=17
