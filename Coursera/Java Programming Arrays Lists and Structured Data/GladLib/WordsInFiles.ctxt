#BlueJ class context
comment0.target=WordsInFiles
comment1.params=
comment1.target=WordsInFiles()
comment2.params=f
comment2.target=void\ addWordsFromFile(java.io.File)
comment2.text=\n\ This\ method\ should\ add\ all\ the\ words\ from\ f\ into\ the\ map.\ If\ a\ word\ is\n\ not\ in\ the\ map,\ then\ you\ must\ create\ a\ new\ ArrayList\ of\ type\ String\n\ with\ this\ word,\ and\ have\ the\ word\ map\ to\ this\ ArrayList.\ If\ a\ word\ is\n\ already\ in\ the\ map,\ then\ add\ the\ current\ filename\ to\ its\ ArrayList,\n\ unless\ the\ filename\ is\ already\ in\ the\ ArrayList.\ \n
comment3.params=
comment3.target=void\ buildWordFileMap()
comment3.text=\n\ This\ method\ first\ clears\ the\ map,\ and\ then\ uses\ a\ DirectoryResource\ to\n\ select\ a\ group\ of\ files.\ For\ each\ file,\ it\ puts\ all\ of\ its\ words\ into\n\ the\ map\ by\ calling\ the\ method\ addWordsFromFile.\ The\ remaining\ methods\n\ to\ write\ all\ assume\ that\ the\ HashMap\ has\ been\ built.\n
comment4.params=
comment4.target=int\ maxNumber()
comment4.text=\n\ This\ method\ returns\ the\ maximum\ number\ of\ files\ any\ word\ appears\ in,\n\ considering\ all\ words\ from\ a\ group\ of\ files.\n
comment5.params=number
comment5.target=java.util.ArrayList\ wordsInNumFiles(int)
comment5.text=\n\ This\ method\ returns\ an\ ArrayList\ of\ words\ that\ appear\ in\ exactly\n\ number\ files.\n
comment6.params=word
comment6.target=void\ printFilesIn(java.lang.String)
comment6.text=\n\ This\ method\ prints\ the\ names\ of\ the\ files\ this\ word\ appears\ in,\n\ one\ filename\ per\ line.\n
comment7.params=
comment7.target=void\ tester()
numComments=8
