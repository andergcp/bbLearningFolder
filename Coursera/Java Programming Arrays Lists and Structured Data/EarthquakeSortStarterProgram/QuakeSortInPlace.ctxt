#BlueJ class context
comment0.target=QuakeSortInPlace
comment1.params=
comment1.target=QuakeSortInPlace()
comment10.params=in
comment10.target=void\ sortByMagnitudeWithCheck(java.util.ArrayList)
comment10.text=\n\ This\ method\ sorts\ earthquakes\ by\ their\ magnitude\ from\ smallest\ to\n\ largest\ using\ selection\ sort\ similar\ to\ the\ sortByMagnitude\ method.\n\ However,\ this\ method\ should\ call\ checkInSortedOrder\ and\ stop\ early\ if\n\ the\ ArrayList\ is\ already\ sorted.\ This\ method\ should\ print\ how\ many\n\ passes\ were\ needed\ to\ sort\ the\ elements.\ For\ selection\ sort,\ one\ pass\n\ has\ exactly\ one\ swap.\ \n
comment11.params=
comment11.target=void\ testSort()
comment12.params=
comment12.target=void\ createCSV()
comment13.params=list
comment13.target=void\ dumpCSV(java.util.ArrayList)
comment2.params=quakes\ from
comment2.target=int\ getSmallestMagnitude(java.util.ArrayList,\ int)
comment3.params=in
comment3.target=void\ sortByMagnitude(java.util.ArrayList)
comment4.params=quakeData\ from
comment4.target=int\ getLargestDepth(java.util.ArrayList,\ int)
comment4.text=\n\ This\ method\ returns\ an\ integer\ representing\ the\ index\ position\ of\ the\n\ QuakeEntry\ with\ the\ largest\ depth\ considering\ only\ those\ QuakeEntry\u2019s\n\ from\ position\ from\ to\ the\ end\ of\ the\ ArrayList.\ \n
comment5.params=in
comment5.target=void\ sortByLargestDepth(java.util.ArrayList)
comment5.text=\n\ This\ method\ sorts\ the\ QuakeEntry\u2019s\ in\ the\ ArrayList\ by\ depth\ using\ the\n\ selection\ sort\ algorithm,\ but\ in\ reverse\ order\ from\ largest\ depth\ to\n\ smallest\ depth\ (the\ QuakeEntry\ with\ the\ largest\ depth\ should\ be\ in\ the\n\ 0th\ position\ in\ the\ ArrayList).\n
comment6.params=quakeData\ numSorted
comment6.target=void\ onePassBubbleSort(java.util.ArrayList,\ int)
comment6.text=\n\ This\ method\ makes\ one\ pass\ of\ bubble\ sort\ on\ the\ ArrayList.\ It\ should\n\ take\ advantage\ of\ the\ fact\ that\ the\ last\ numSorted\ elements\ are\ already\n\ in\ sorted\ order\n
comment7.params=in
comment7.target=void\ sortByMagnitudeWithBubbleSort(java.util.ArrayList)
comment7.text=\n\ Implementing\ bubble\ sort\n
comment8.params=quakes
comment8.target=boolean\ checkInSortedOrder(java.util.ArrayList)
comment8.text=\n\ This\ method\ returns\ true\ if\ the\ earthquakes\ are\ in\ sorted\ order\ by\n\ magnitude\ from\ smallest\ to\ largest.\ Otherwise\ this\ methods\ returns\n\ false\n
comment9.params=in
comment9.target=void\ sortByMagnitudeWithBubbleSortWithCheck(java.util.ArrayList)
comment9.text=\n\ This\ method\ should\ call\ checkInSortedOrder\ and\ stop\ early\ if\ the\n\ ArrayList\ is\ already\ sorted.\ This\ method\ prints\ how\ many\ passes\n\ were\ needed\ to\ sort\ the\ elements.\ \n
numComments=14
